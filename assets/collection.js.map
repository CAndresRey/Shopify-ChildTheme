{"version":3,"file":"collection.js","mappings":"mBAKA,MAUMA,EAAK,CAACC,EAAMC,KACRA,GAAkBC,UAAUC,cAAcH,GCdpDI,QAAQC,YAAc,CAAC,GAkBvB,WACE,GAAIC,SAASC,OAAOC,OAAQ,CAC1B,IAAIC,EAASH,SAASC,OAAOG,UAAU,GAAGC,MAAM,KAEhD,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOD,OAAQI,IAAK,CACtC,IAAIC,EAAWJ,EAAOG,GAAGD,MAAM,KAE3BE,EAASL,SACXJ,QAAQC,YAAYS,mBAAmBD,EAAS,KAAOC,mBAAmBD,EAAS,IAEtF,CACF,CAXH,ICfC,MASYE,EAAmB,CAACC,EAAShB,EAAMiB,EAAS,CAAC,KACxD,MAAM,QAAEC,EAAF,cAAWC,GAAkBF,EAEnClB,EAAGiB,GAASI,iBAAiB,SAAS,WACpCC,EAAWtB,EAAGC,GAAOkB,EACtB,IAEDC,GAAiBpB,EAAGoB,GAAeC,iBACjC,SACA,WACEC,EAAWtB,EAAGC,GAAOkB,EACtB,GAJH,EAcK,SAASG,EAAYrB,EAAMkB,GAChC,MAAM,QAAEI,EAAF,GAAWC,GAAOvB,EAClBwB,EAhCU,GAAGA,YAAwB,SAAXA,EAgCjBC,CAASH,GAGtBA,EAAQE,OADNA,EACe,QAEA,OAGnBN,GAAWQ,EAAeH,EAAIC,EAAQxB,EACvC,CAQD,MAAM0B,EAAiB,CAACH,EAAIC,EAAQxB,KAClC,MAAM2B,EAAa,YAAWJ,IACxBtB,EAASD,EAAK4B,WAEpB,GAAKJ,EASHvB,EAAO4B,YAAY9B,EAAG,IAAM4B,QATjB,CACX,MAAMT,EAAUhB,SAAS4B,cAAc,OAEvCZ,EAAQa,aAAa,KAAMJ,GAC3BT,EAAQc,UAAUC,IAAI,WAEtBhC,EAAOiC,aAAahB,EAASlB,GAC7Be,EAAiB,IAAMY,EAAW,IAAMJ,EAAI,CAAEL,SAAS,GACxD,CAEA,ED5DDnB,EAAG,YACFqB,iBACC,UACA,UAAS,OAAEe,IACT/B,QAAQC,YAAY+B,QAAUD,EAAOE,MACrC/B,SAASC,OAAS,IAAI+B,gBAAgBlC,QAAQC,aAAakC,UAC9D,IERHxB,EACE,eACA,UACA,CACEG,SAAS,IAIbH,EACE,wBACA,UACA,CACEG,SAAS,G","sources":["webpack://theme-base-shopify/./src/utils/query-selector.js","webpack://theme-base-shopify/./src/components/sort-by.js","webpack://theme-base-shopify/./src/utils/toggle-dataset.js","webpack://theme-base-shopify/./src/templates/collection.js"],"sourcesContent":["/**\n * @param {String} nodes - ClassList with DOM reference\n * @param {HTMLElement} parent - Parent of nodes \n * @returns {Array} Array of nodes in DOM\n */\nconst $Qll = (nodes, parent) => {\n  return [...(parent ? parent : document).querySelectorAll(nodes)];\n}\n\n/**\n * \n * @param {HTMLElement} node - ClassName with DOM reference\n * @param {HTMLElement} parent - Parent of nodes\n * @returns {Node} Node in DOM\n */\nconst $Q = (node, parent) => {\n  return (parent ? parent : document).querySelector(node);\n}\n\nexport {\n  $Qll,\n  $Q\n}","import { $Q } from \"../utils/query-selector\";\n\nShopify.queryParams = {};\n\n/**\n * Update sort_by query parameter on select change\n */\nexport const defultSortBy = () => {\n  $Q('#sort-by')\n  .addEventListener(\n    'change',\n    function({ target }) {\n      Shopify.queryParams.sort_by = target.value;\n      location.search = new URLSearchParams(Shopify.queryParams).toString();\n  });\n}\n\n/**\n * Preserve existing query parameters\n */\n(function() {\n  if (location.search.length) {\n    let params = location.search.substring(1).split('&');\n  \n    for (var i = 0; i < params.length; i++) {\n      let keyValue = params[i].split('=');\n  \n      if (keyValue.length) {\n        Shopify.queryParams[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1]);\n      }\n    }\n  }\n})();\n","import { $Q } from \"./query-selector\"\n\n/**\n * To validate state in dataset node\n */\n const isActive = ({ active }) => active === \"true\";\n\n/**\n * Data Active toggle\n *\n * @param {String} control - ID button control\n * @param {String} node - ID modal\n * @param {Object} config - Object with overlay, closeSelector\n */\nexport const toggleDataActive = (control, node, config = {}) => {\n  const { overlay, closeSelector } = config;\n\n  $Q(control).addEventListener(\"click\", function () {\n    dataToggle($Q(node), overlay);\n  });\n\n  closeSelector && $Q(closeSelector).addEventListener(\n    \"click\",\n    function () {\n      dataToggle($Q(node), overlay);\n    }\n  );\n}\n\n/**\n* Data Toggle\n*\n* @param {HTMLElement} node - Node to manipulate\n* @param {Boolean} overlay - if used to a overlay\n*/\nexport function dataToggle (node, overlay) {\n  const { dataset, id } = node;\n  const active = isActive(dataset);\n\n  if (active) {\n    dataset.active = \"false\";\n  } else {\n    dataset.active = \"true\";\n  }\n\n  overlay && overlayActions(id, active, node);\n}\n\n/**\n *\n * @param {String} id - ID from node manipulate\n * @param {Boolean} active - If modal active\n * @param {HTMLElement} node - Node to manipulate\n */\nconst overlayActions = (id, active, node) => {\n  const idOverlay = `overlay--${id}`;\n  const parent = node.parentNode;\n\n  if (!active) {\n    const overlay = document.createElement(\"div\");\n\n    overlay.setAttribute(\"id\", idOverlay);\n    overlay.classList.add(\"overlay\");\n\n    parent.insertBefore(overlay, node);\n    toggleDataActive(\"#\" + idOverlay, \"#\" + id, { overlay: true });\n  } else {\n    parent.removeChild($Q(\"#\" + idOverlay));\n  }\n}\n\n\n","import { defultSortBy } from \"../components/sort-by\";\nimport \"../scss/collection.scss\";\nimport { toggleDataActive } from \"../utils/toggle-dataset\";\n\ndefultSortBy();\n\ntoggleDataActive(\n  '#filter-open',\n  '#filter',\n  {\n    overlay: true\n  }\n)\n\ntoggleDataActive(\n  '.filter-form_name svg',\n  '#filter',\n  {\n    overlay: true\n  }\n)\n"],"names":["$Q","node","parent","document","querySelector","Shopify","queryParams","location","search","length","params","substring","split","i","keyValue","decodeURIComponent","toggleDataActive","control","config","overlay","closeSelector","addEventListener","dataToggle","dataset","id","active","isActive","overlayActions","idOverlay","parentNode","removeChild","createElement","setAttribute","classList","add","insertBefore","target","sort_by","value","URLSearchParams","toString"],"sourceRoot":""}