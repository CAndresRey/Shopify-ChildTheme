{"version":3,"file":"collection.js","mappings":"mBAKA,MAAMA,EAAO,CACXC,EAEAC,IAAW,KAAKA,GAAUC,UAAUC,iBAAiBH,IASjDI,EAAK,CAACC,EAAMJ,KAAYA,GAAUC,UAAUI,cAAcD,GCfhEE,QAAQC,YAAc,CAAC,GAkBvB,WACE,GAAIC,SAASC,OAAOC,OAAQ,CAC1B,IAAIC,EAASH,SAASC,OAAOG,UAAU,GAAGC,MAAM,KAEhD,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOD,OAAQI,IAAK,CACtC,IAAIC,EAAWJ,EAAOG,GAAGD,MAAM,KAE3BE,EAASL,SACXJ,QAAQC,YAAYS,mBAAmBD,EAAS,KAAOC,mBAAmBD,EAAS,IAEtF,CACF,CAXH,ICkBO,SAASE,EAAWb,EAAMc,GAC/B,MAAM,QAAEC,EAAF,GAAWC,GAAOhB,EAClBiB,EAVU,GAAGA,YAAwB,SAAXA,EAUjBC,CAASH,GAGtBA,EAAQE,OADNA,EACe,QAEA,OAInBH,GAzCsB,EAACE,EAAIC,EAAQjB,KACnC,MAAMmB,EAAa,YAAWH,IACxBpB,EAASI,EAAKoB,WAEpB,GAAKH,EAWHrB,EAAOyB,YAAYtB,EAAI,IAAGoB,UAXf,CAEX,MAAML,EAAUjB,SAASyB,cAAc,OAEvCR,EAAQS,aAAa,KAAMJ,GAC3BL,EAAQU,UAAUC,IAAI,WAEtB7B,EAAO8B,aAAaZ,EAASd,GAE7B2B,EAAkB,IAAGR,IAAc,IAAGH,IAAM,CAAEF,SAAS,GACxD,CAEA,EAyBUc,CAAeZ,EAAIC,EAAQjB,EACvC,CASM,MAAM2B,EAAmB,CAACE,EAAS7B,EAAM8B,EAAS,CAAC,KACxD,MAAM,QAAEhB,EAAF,cAAWiB,GAAkBD,EAEnC/B,EAAG8B,GAASG,iBAAiB,SAAS,KACpCnB,EAAWd,EAAGC,GAAOc,EAArB,IAIFiB,GAAiBhC,EAAGgC,GAAeC,iBACjC,SACA,KACEnB,EAAWd,EAAGC,GAAOc,EAArB,GAHJ,ED3DAf,EAAG,YACFiC,iBACC,UACA,UAAS,OAAEC,IACT/B,QAAQC,YAAY+B,QAAUD,EAAOE,MACrC/B,SAASC,OAAS,IAAI+B,gBAAgBlC,QAAQC,aAAakC,UAC9D,IEPHV,EACE,eACA,UACA,CACEb,SAAS,IAIba,EACE,wBACA,UACA,CACEb,SAAS,ICXN,WACL,MAAMwB,EAAU5C,EAAK,mBACf6C,EAAU7C,EAAK,mBACf8C,EAAWzC,EAAG,uBAEpBuC,EAAQG,SAAQC,IACVH,EAAQ,GAAGJ,QACbK,EAASG,MAAMC,KAAQL,EAAQ,GAAGJ,MAAQG,EAAQ,GAAGO,IAAO,IAAM,IAClEL,EAASG,MAAMG,MAAQ,IAAOP,EAAQ,GAAGJ,MAAQG,EAAQ,GAAGO,IAAO,IAAM,KAEzEH,EAAMV,iBAAiB,SAASe,IAC5B,IAAIC,EAASV,EAAQ,GAAGH,MACxBc,EAASX,EAAQ,GAAGH,MAClBc,EAASD,EATJ,EAUsB,cAAvBD,EAAEd,OAAOiB,UACPZ,EAAQ,GAAGH,MAAQc,EAXpB,EAaCX,EAAQ,GAAGH,MAAQa,EAbpB,GAgBHT,EAAQ,GAAGJ,MAAQgB,WAAWH,GAAQI,QAAQ,GAC9Cb,EAAQ,GAAGJ,MAAQgB,WAAWF,GAAQG,QAAQ,GAC9CZ,EAASG,MAAMC,KAAQI,EAASV,EAAQ,GAAGO,IAAO,IAAM,IACxDL,EAASG,MAAMG,MAAQ,IAAOG,EAASX,EAAQ,GAAGO,IAAO,IAAM,IACnE,GAdJ,GAiBL,CDZDQ,E","sources":["webpack://theme-base-shopify/./src/utils/query-selector.js","webpack://theme-base-shopify/./src/components/sort-by.js","webpack://theme-base-shopify/./src/utils/toggle-dataset.js","webpack://theme-base-shopify/./src/templates/collection.js","webpack://theme-base-shopify/./src/components/filters-range.js"],"sourcesContent":["/**\r\n * @param {String} nodes - ClassList with DOM reference\r\n * @param {HTMLElement} parent - Parent of nodes\r\n * @returns {Array} Array of nodes in DOM\r\n */\r\nconst $Qll = (\r\n  nodes,\r\n  // eslint-disable-next-line no-undef\r\n  parent) => [...(parent || document).querySelectorAll(nodes)]\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} node - ClassName with DOM reference\r\n * @param {HTMLElement} parent - Parent of nodes\r\n * @returns {Node} Node in DOM\r\n */\r\n// eslint-disable-next-line no-undef\r\nconst $Q = (node, parent) => (parent || document).querySelector(node)\r\n\r\nexport {\r\n  $Qll,\r\n  $Q,\r\n}\r\n","import { $Q } from \"../utils/query-selector\";\r\n\r\nShopify.queryParams = {};\r\n\r\n/**\r\n * Update sort_by query parameter on select change\r\n */\r\nexport const defultSortBy = () => {\r\n  $Q('#sort-by')\r\n  .addEventListener(\r\n    'change',\r\n    function({ target }) {\r\n      Shopify.queryParams.sort_by = target.value;\r\n      location.search = new URLSearchParams(Shopify.queryParams).toString();\r\n  });\r\n}\r\n\r\n/**\r\n * Preserve existing query parameters\r\n */\r\n(function() {\r\n  if (location.search.length) {\r\n    let params = location.search.substring(1).split('&');\r\n  \r\n    for (var i = 0; i < params.length; i++) {\r\n      let keyValue = params[i].split('=');\r\n  \r\n      if (keyValue.length) {\r\n        Shopify.queryParams[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1]);\r\n      }\r\n    }\r\n  }\r\n})();\r\n","import { $Q } from \"./query-selector\"\r\n\r\n/**\r\n *\r\n * @param {String} id - ID from node manipulate\r\n * @param {Boolean} active - If modal active\r\n * @param {HTMLElement} node - Node to manipulate\r\n */\r\n const overlayActions = (id, active, node) => {\r\n  const idOverlay = `overlay--${id}`;\r\n  const parent = node.parentNode;\r\n\r\n  if (!active) {\r\n    // eslint-disable-next-line no-undef\r\n    const overlay = document.createElement(\"div\");\r\n\r\n    overlay.setAttribute(\"id\", idOverlay);\r\n    overlay.classList.add(\"overlay\");\r\n\r\n    parent.insertBefore(overlay, node);\r\n    // eslint-disable-next-line no-use-before-define\r\n    toggleDataActive(`#${idOverlay}`, `#${id}`, { overlay: true });\r\n  } else {\r\n    parent.removeChild($Q(`#${idOverlay}`));\r\n  }\r\n}\r\n\r\n/**\r\n * To validate state in dataset node\r\n */\r\n const isActive = ({ active }) => active === \"true\";\r\n\r\n/**\r\n* Data Toggle\r\n*\r\n* @param {HTMLElement} node - Node to manipulate\r\n* @param {Boolean} overlay - if used to a overlay\r\n*/\r\nexport function dataToggle(node, overlay) {\r\n  const { dataset, id } = node;\r\n  const active = isActive(dataset);\r\n\r\n  if (active) {\r\n    dataset.active = \"false\";\r\n  } else {\r\n    dataset.active = \"true\";\r\n  }\r\n\r\n  // eslint-disable-next-line no-unused-expressions\r\n  overlay && overlayActions(id, active, node);\r\n}\r\n\r\n/**\r\n * Data Active toggle\r\n *\r\n * @param {String} control - ID button control\r\n * @param {String} node - ID modal\r\n * @param {Object} config - Object with overlay, closeSelector\r\n */\r\nexport const toggleDataActive = (control, node, config = {}) => {\r\n  const { overlay, closeSelector } = config;\r\n\r\n  $Q(control).addEventListener(\"click\", () => {\r\n    dataToggle($Q(node), overlay);\r\n  });\r\n\r\n  // eslint-disable-next-line no-unused-expressions\r\n  closeSelector && $Q(closeSelector).addEventListener(\r\n    \"click\",\r\n    () => {\r\n      dataToggle($Q(node), overlay);\r\n    },\r\n  );\r\n}\r\n","import { defultSortBy } from \"../components/sort-by\";\r\nimport \"../scss/collection.scss\";\r\nimport { toggleDataActive } from \"../utils/toggle-dataset\";\r\nimport { rangeFilters } from \"../components/filters-range\";\r\n\r\ndefultSortBy();\r\n\r\ntoggleDataActive(\r\n  '#filter-open',\r\n  '#filter',\r\n  {\r\n    overlay: true\r\n  }\r\n)\r\n\r\ntoggleDataActive(\r\n  '.filter-form_name svg',\r\n  '#filter',\r\n  {\r\n    overlay: true\r\n  }\r\n)\r\n\r\nrangeFilters();\r\n","import { $Q, $Qll } from \"../utils/query-selector\"\r\n/**\r\n *\r\n * we control the price range filter in order to avoid that the minimum\r\n * value is greater than the highest value and that the highest\r\n * value is not less than the lowest value\r\n *\r\n */\r\nexport function rangeFilters() {\r\n  const rangein = $Qll(\".range-in input\");\r\n  const pricein = $Qll(\".price-in input\");\r\n  const progress = $Q('.slider-filter .pro');\r\n  let priceGap = 0;\r\n  rangein.forEach(input =>{\r\n    if (pricein[0].value){\r\n      progress.style.left = (pricein[0].value / rangein[0].max) * 100 + \"%\";\r\n      progress.style.right = 100 - (pricein[1].value / rangein[1].max) * 100 + \"%\";\r\n    }\r\n      input.addEventListener(\"input\", e =>{\r\n          let minVal = rangein[0].value,\r\n          maxVal = rangein[1].value;\r\n         if(maxVal - minVal < priceGap){\r\n             if(e.target.className === \"range-min\"){\r\n                  rangein[0].value = maxVal - priceGap;\r\n             }else{\r\n                  rangein[1].value = minVal + priceGap;\r\n             }\r\n         } else{\r\n              pricein[0].value = parseFloat(minVal).toFixed(2);\r\n              pricein[1].value = parseFloat(maxVal).toFixed(2);\r\n              progress.style.left = (minVal / rangein[0].max) * 100 + \"%\";\r\n              progress.style.right = 100 - (maxVal / rangein[1].max) * 100 + \"%\";\r\n         }\r\n      });\r\n  });\r\n}\r\n"],"names":["$Qll","nodes","parent","document","querySelectorAll","$Q","node","querySelector","Shopify","queryParams","location","search","length","params","substring","split","i","keyValue","decodeURIComponent","dataToggle","overlay","dataset","id","active","isActive","idOverlay","parentNode","removeChild","createElement","setAttribute","classList","add","insertBefore","toggleDataActive","overlayActions","control","config","closeSelector","addEventListener","target","sort_by","value","URLSearchParams","toString","rangein","pricein","progress","forEach","input","style","left","max","right","e","minVal","maxVal","className","parseFloat","toFixed","rangeFilters"],"sourceRoot":""}