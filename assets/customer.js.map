{"version":3,"file":"customer.js","mappings":"mBAKA,MAUMA,EAAK,CAACC,EAAMC,KACRA,GAAkBC,UAAUC,cAAcH,GCV9CI,EAAqBC,IACzB,MAAMC,EAASD,EAAGC,OACZC,EAAKD,EAAOE,QAAQC,KACpBC,EAAYJ,EAAOE,QAAQG,MAEjC,OAAOC,EAAaF,EAAWH,EAA/B,EASIK,EAAe,CAACF,EAAWH,KAC/BM,QAAQC,IAAIJ,GACZ,IAAIK,EAAS,CACXC,KAAM,KACJC,EACE,4BACA,8BAEFA,EACG,iCAAgCV,MAChC,kCAAiCA,MAFpC,EAKFW,IAAK,KACHD,EACE,oBACA,2BAFF,EAKF,aAAc,KACZA,EACE,2BACA,oBAFF,GASJ,GAFAJ,QAAQC,IAAIC,EAAOL,KAEdA,KAAaK,EAAQ,CAWxB,MAVU,MACRE,EACA,6BACA,6BAEAA,EACG,kCAAiCV,MACjC,iCAAgCA,MAFnC,EAKKY,EACR,CAED,OAAOJ,EAAOL,IAAd,EAQIO,EAAoB,CAACG,EAAMC,KAC/BtB,EAAGqB,GAAME,UAAUC,IAAI,UACvBxB,EAAGsB,GAAQC,UAAUE,OAAO,SAA5B,EAO0B,MAC1B,MAAMC,GD5EMC,EC4EY,iBD3EjB,KAAKzB,GAAkBC,UAAUyB,iBAAiBD,KAD9C,IAACA,EAAOzB,EC6EnB,IAAK,IAAI2B,KAAUH,EACjBG,EAAOC,iBAAiB,SAAUC,IAChC1B,EAAkB0B,EAAlB,GAEH,ECnFHC,E","sources":["webpack://theme-base-shopify/./src/utils/query-selector.js","webpack://theme-base-shopify/./src/components/form.addresses.js","webpack://theme-base-shopify/./src/templates/customer.js"],"sourcesContent":["/**\r\n * @param {String} nodes - ClassList with DOM reference\r\n * @param {HTMLElement} parent - Parent of nodes \r\n * @returns {Array} Array of nodes in DOM\r\n */\r\nconst $Qll = (nodes, parent) => {\r\n  return [...(parent ? parent : document).querySelectorAll(nodes)];\r\n}\r\n\r\n/**\r\n * \r\n * @param {HTMLElement} node - ClassName with DOM reference\r\n * @param {HTMLElement} parent - Parent of nodes\r\n * @returns {Node} Node in DOM\r\n */\r\nconst $Q = (node, parent) => {\r\n  return (parent ? parent : document).querySelector(node);\r\n}\r\n\r\nexport {\r\n  $Qll,\r\n  $Q\r\n}","import { $Q, $Qll } from \"../utils/query-selector\"\r\n\r\n/**\r\n * Event handler form Addresses\r\n * @param {String} ev event\r\n */\r\nconst clickFormAddresse = (ev) => {\r\n  const target = ev.target;\r\n  const id = target.dataset.form;\r\n  const eventType = target.dataset.event;\r\n\r\n  return eventHandler(eventType, id);\r\n}\r\n\r\n/**\r\n * Handle form events\r\n * @param {String} eventType \r\n * @param {String} id \r\n * @returns {Function}\r\n */\r\nconst eventHandler = (eventType, id) => {\r\n  console.log(eventType);\r\n  let events = {\r\n    edit: () => {\r\n      toggleHideElement(\r\n        '#container-addresses-list', \r\n        '#container-addresses-forms'\r\n      );\r\n      toggleHideElement(\r\n        `.address-container[data-form=\"${id}\"]`, \r\n        `.form-edit-addresse[data-form=\"${id}\"]`\r\n      );\r\n    },\r\n    new: () => {\r\n      toggleHideElement(\r\n        '#btn-new_addresse', \r\n        '#containers-new-addresse'\r\n      );\r\n    },\r\n    \"cancel-new\": () => {\r\n      toggleHideElement(\r\n        '#containers-new-addresse', \r\n        '#btn-new_addresse'\r\n      );\r\n    }\r\n  }\r\n\r\n  console.log(events[eventType])\r\n\r\n  if (!eventType in events) {\r\n    let res = () => {\r\n      toggleHideElement(\r\n      '#container-addresses-forms', \r\n      '#container-addresses-list'\r\n      );\r\n      toggleHideElement(\r\n        `.form-edit-addresse[data-form=\"${id}\"]`, \r\n        `.address-container[data-form=\"${id}\"]`\r\n      );\r\n    }\r\n    return res();\r\n  } \r\n\r\n  return events[eventType]();\r\n}\r\n\r\n/**\r\n * Hide / unhide elements\r\n * @param {String} hide \r\n * @param {String} unhide \r\n */\r\nconst toggleHideElement = (hide, unhide) => {\r\n  $Q(hide).classList.add('hidden');\r\n  $Q(unhide).classList.remove('hidden');\r\n}\r\n\r\n\r\n/**\r\n * Open address edit form \r\n */\r\nexport const openFormEdit = () => {\r\n  const buttonEdit = $Qll('.edit-addresse');\r\n  for (let button of buttonEdit) {\r\n    button.addEventListener('click', (e) => {\r\n      clickFormAddresse(e);\r\n    })\r\n  }\r\n}\r\n","import \"../scss/customer.scss\"\r\nimport { openFormEdit } from \"../components/form.addresses\";\r\n\r\nopenFormEdit();"],"names":["$Q","node","parent","document","querySelector","clickFormAddresse","ev","target","id","dataset","form","eventType","event","eventHandler","console","log","events","edit","toggleHideElement","new","res","hide","unhide","classList","add","remove","buttonEdit","nodes","querySelectorAll","button","addEventListener","e","openFormEdit"],"sourceRoot":""}