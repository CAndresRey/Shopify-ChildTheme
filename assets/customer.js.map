{"version":3,"file":"customer.js","mappings":"mBAKA,MAUMA,EAAK,CAACC,EAAMC,KACRA,GAAkBC,UAAUC,cAAcH,GCV9CI,EAAqBC,IACzB,MAAMC,EAASD,EAAGC,OACZC,EAAKD,EAAOE,QAAQC,KACpBC,EAAYJ,EAAOE,QAAQG,MAEjC,OAAOC,EAAaF,EAAWH,EAA/B,EASIK,EAAe,CAACF,EAAWH,KAC/B,IAAIM,EAAS,CACXC,KAAM,KACJC,EACE,4BACA,8BAEFA,EACG,iCAAgCR,MAChC,kCAAiCA,MAFpC,EAKFS,IAAK,KACHD,EACE,oBACA,2BAFF,EAKF,aAAc,KACZA,EACE,2BACA,oBAFF,GAOJ,IAAKL,KAAaG,EAAQ,CAWxB,MAVU,MACRE,EACA,6BACA,6BAEAA,EACG,kCAAiCR,MACjC,iCAAgCA,MAFnC,EAKKU,EACR,CAED,OAAOJ,EAAOH,IAAd,EAQIK,EAAoB,CAACG,EAAMC,KAC/BpB,EAAGmB,GAAME,UAAUC,IAAI,UACvBtB,EAAGoB,GAAQC,UAAUE,OAAO,SAA5B,EAO0B,MAC1B,MAAMC,GDzEMC,ECyEY,iBDxEjB,KAAKvB,GAAkBC,UAAUuB,iBAAiBD,KAD9C,IAACA,EAAOvB,EC0EnB,IAAK,IAAIyB,KAAUH,EACjBG,EAAOC,iBAAiB,SAAUC,IAChCxB,EAAkBwB,EAAlB,GAEH,EChFHC,E","sources":["webpack://theme-base-shopify/./src/utils/query-selector.js","webpack://theme-base-shopify/./src/components/form.addresses.js","webpack://theme-base-shopify/./src/templates/customer.js"],"sourcesContent":["/**\n * @param {String} nodes - ClassList with DOM reference\n * @param {HTMLElement} parent - Parent of nodes \n * @returns {Array} Array of nodes in DOM\n */\nconst $Qll = (nodes, parent) => {\n  return [...(parent ? parent : document).querySelectorAll(nodes)];\n}\n\n/**\n * \n * @param {HTMLElement} node - ClassName with DOM reference\n * @param {HTMLElement} parent - Parent of nodes\n * @returns {Node} Node in DOM\n */\nconst $Q = (node, parent) => {\n  return (parent ? parent : document).querySelector(node);\n}\n\nexport {\n  $Qll,\n  $Q\n}","import { $Q, $Qll } from \"../utils/query-selector\"\n\n/**\n * Event handler form Addresses\n * @param {String} ev event\n */\nconst clickFormAddresse = (ev) => {\n  const target = ev.target;\n  const id = target.dataset.form;\n  const eventType = target.dataset.event;\n\n  return eventHandler(eventType, id);\n}\n\n/**\n * Handle form events\n * @param {String} eventType \n * @param {String} id \n * @returns {Function}\n */\nconst eventHandler = (eventType, id) => {\n  let events = {\n    edit: () => {\n      toggleHideElement(\n        '#container-addresses-list', \n        '#container-addresses-forms'\n      );\n      toggleHideElement(\n        `.address-container[data-form=\"${id}\"]`, \n        `.form-edit-addresse[data-form=\"${id}\"]`\n      );\n    },\n    new: () => {\n      toggleHideElement(\n        '#btn-new_addresse', \n        '#containers-new-addresse'\n      );\n    },\n    \"cancel-new\": () => {\n      toggleHideElement(\n        '#containers-new-addresse', \n        '#btn-new_addresse'\n      );\n    }\n  }\n\n  if (!eventType in events) {\n    let res = () => {\n      toggleHideElement(\n      '#container-addresses-forms', \n      '#container-addresses-list'\n      );\n      toggleHideElement(\n        `.form-edit-addresse[data-form=\"${id}\"]`, \n        `.address-container[data-form=\"${id}\"]`\n      );\n    }\n    return res();\n  } \n\n  return events[eventType]();\n}\n\n/**\n * Hide / unhide elements\n * @param {String} hide \n * @param {String} unhide \n */\nconst toggleHideElement = (hide, unhide) => {\n  $Q(hide).classList.add('hidden');\n  $Q(unhide).classList.remove('hidden');\n}\n\n\n/**\n * Open address edit form \n */\nexport const openFormEdit = () => {\n  const buttonEdit = $Qll('.edit-addresse');\n  for (let button of buttonEdit) {\n    button.addEventListener('click', (e) => {\n      clickFormAddresse(e);\n    })\n  }\n}\n","import \"../scss/customer.scss\"\nimport { openFormEdit } from \"../components/form.addresses\";\n\nopenFormEdit();"],"names":["$Q","node","parent","document","querySelector","clickFormAddresse","ev","target","id","dataset","form","eventType","event","eventHandler","events","edit","toggleHideElement","new","res","hide","unhide","classList","add","remove","buttonEdit","nodes","querySelectorAll","button","addEventListener","e","openFormEdit"],"sourceRoot":""}