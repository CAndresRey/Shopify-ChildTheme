{"version":3,"file":"customer.js","mappings":"mBAKA,MAUMA,EAAK,CAACC,EAAMC,KACRA,GAAkBC,UAAUC,cAAcH,GCR9CI,EAAgBC,IACpBA,EAASC,SAASC,IAChB,OAAO,QAAEC,GAAWC,GAAS,GAASF,EAGpCC,EAAQE,SADND,CAIH,GAPH,EAWIE,EAAc,CAACC,EAAMC,EAAYC,GAAW,KAChD,IAAKF,EAAM,OAAO,KAElB,MAAMG,EAAWhB,EAAI,6BAA4Ba,OAC3CI,EAAcjB,EAAI,+BAA8Ba,OAEtD,GAAIE,EAAU,CACZ,MAAMG,EAAclB,EAAI,gCAA+Ba,OAEvD,OAAOR,EAAa,CAClB,CAACW,GACD,CAACC,GAAa,GACd,CAACC,GAAa,IAEjB,CAED,OAAOb,EAAa,CAClB,CAACW,GAAU,GACX,CAACC,GACD,CAACH,IAHH,EAwCA,IDvEYK,EAAOjB,GAAPiB,ECwEY,cDvEjB,KAAKjB,GAAkBC,UAAUiB,iBAAiBD,KCyE9CZ,SAASc,IAClBA,EAAOC,iBAAiB,SAAUC,IAjCXC,KACzB,MAAM,OAAEC,GAAWD,GACb,WACJV,EADI,mBAEJY,EACAjB,SAAS,MAAEkB,EAAF,KAASd,IAChBY,GAEY,CACdG,KAAM,IAAMhB,EAAYC,EAAMC,GAC9Be,IAAK,IAAMxB,EAAa,CAAC,CAACqB,GAAoB,GAAO,CAACD,KACtDK,OAAQ,IACFjB,EACKD,EAAYC,EAAM,MAAM,GAG1BR,EAAa,CAClB,CAACS,GACD,CAACd,EAAI,kCAAiC,OAK7B2B,IAAf,EAWII,CAAkBR,EAAlB,GADF,IC5EJ,MAAMS,EAAkB,CAACC,EAAaC,KACpClC,EAAGiC,GAAaxB,QAAQE,QAAS,EACjCX,EAAGkC,GAAezB,QAAQE,QAAS,CAAnC,EAIAX,EAAG,oBAAoBsB,iBAAiB,SACtC,IAAMU,EAAgB,qBAAsB,sBAG9ChC,EAAG,mBAAmBsB,iBAAiB,SACrC,IAAMU,EAAgB,mBAAoB,uB","sources":["webpack://theme-base-shopify/./src/utils/query-selector.js","webpack://theme-base-shopify/./src/components/form-addresses.js","webpack://theme-base-shopify/./src/templates/customer.js"],"sourcesContent":["/**\n * @param {String} nodes - ClassList with DOM reference\n * @param {HTMLElement} parent - Parent of nodes \n * @returns {Array} Array of nodes in DOM\n */\nconst $Qll = (nodes, parent) => {\n  return [...(parent ? parent : document).querySelectorAll(nodes)];\n}\n\n/**\n * \n * @param {HTMLElement} node - ClassName with DOM reference\n * @param {HTMLElement} parent - Parent of nodes\n * @returns {Node} Node in DOM\n */\nconst $Q = (node, parent) => {\n  return (parent ? parent : document).querySelector(node);\n}\n\nexport {\n  $Qll,\n  $Q\n}","import { $Q, $Qll } from '../utils/query-selector';\n\n/**\n * Handle form events\n * @param {String} eventType\n * @param {String} id\n * @returns {Function}\n */\nconst eventHandler = (currents) => {\n  currents.forEach((current) => {\n    const [{ dataset }, isEdit = false] = current;\n\n    if (isEdit) {\n      dataset.active = true;\n    } else {\n      dataset.active = false;\n    }\n  })\n};\n\nconst addressForm = (form, parentNode, isCancel = false) => {\n  if (!form) return null;\n\n  const formById = $Q(`.address__edit[data-form=\"${form}\"]`);\n  const detailsById = $Q(`.address__detail[data-form=\"${form}\"]`);\n\n  if (isCancel) {\n    const actionsById = $Q(`.address__actions[data-form=\"${form}\"]`);\n\n    return eventHandler([\n      [formById],\n      [detailsById, true],\n      [actionsById, true],\n    ]);\n  }\n\n  return eventHandler([\n    [formById, true],\n    [detailsById],\n    [parentNode],\n  ]);\n}\n\n/**\n * Event handler form Addresses\n * @param {String} ev event\n */\nconst clickFormAddresse = (ev) => {\n  const { target } = ev;\n  const {\n    parentNode,\n    nextElementSibling,\n    dataset: { event, form },\n  } = target;\n\n  const actions = {\n    edit: () => addressForm(form, parentNode),\n    new: () => eventHandler([[nextElementSibling, true], [target]]),\n    cancel: () => {\n      if (form) {\n        return addressForm(form, null, true);\n      }\n\n      return eventHandler([\n        [parentNode],\n        [$Q(`.address-js[data-event=\"new\"]`), true],\n      ]);\n    },\n  }\n\n  return actions[event]();\n};\n\n/**\n * Open address edit form\n */\n (function initAdresses() {\n  const buttonEdit = $Qll('.address-js');\n\n  buttonEdit.forEach((button) => {\n    button.addEventListener('click', (e) => {\n      clickFormAddresse(e);\n    });\n  });\n}());\n","import '../scss/customer.scss';\nimport '../components/form-addresses';\nimport { $Q } from '../utils/query-selector';\n\nconst toggleContainer = (elementShow, elementhidden) => {\n  $Q(elementShow).dataset.active = true;\n  $Q(elementhidden).dataset.active = false;\n};\n\n(function recoverToggle() {\n  $Q('#display-recover').addEventListener('click',\n    () => toggleContainer('#recover-container', '#login-container'),\n  );\n\n  $Q('#recover-hidden').addEventListener('click',\n    () => toggleContainer('#login-container', '#recover-container'),\n  );\n}());\n"],"names":["$Q","node","parent","document","querySelector","eventHandler","currents","forEach","current","dataset","isEdit","active","addressForm","form","parentNode","isCancel","formById","detailsById","actionsById","nodes","querySelectorAll","button","addEventListener","e","ev","target","nextElementSibling","event","edit","new","cancel","clickFormAddresse","toggleContainer","elementShow","elementhidden"],"sourceRoot":""}